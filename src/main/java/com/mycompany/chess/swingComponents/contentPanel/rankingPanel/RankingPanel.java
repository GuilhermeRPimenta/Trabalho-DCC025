/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.chess.swingComponents.contentPanel.rankingPanel;

/**
 *
 * @author pablu
 */
import entitites.Player;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import entitites.camposInvalidosException;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.TableModel;
import java.util.Collections;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.table.DefaultTableCellRenderer;

public class RankingPanel extends javax.swing.JPanel {

    /**
     * Creates new form RankingPanel
     */
    private List<RankingEntry> jogadores;

    public RankingPanel() {
        initComponents();
        jogadores = new ArrayList<RankingEntry>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        RankingTitle = new javax.swing.JLabel();
        PlayerButton = new javax.swing.JButton();
        AdmButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(255, 0, 0));

        jScrollPane2.setBackground(new java.awt.Color(0, 0, 0));
        jScrollPane2.setForeground(new java.awt.Color(204, 0, 0));

        jTable2.setBackground(new java.awt.Color(0, 0, 0));
        jTable2.setForeground(new java.awt.Color(0, 0, 0));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "MMR"
            }
        ));
        jTable2.setAlignmentX(2.0F);
        jTable2.setAlignmentY(2.0F);
        jTable2.setName("Tabela De Ranking"); // NOI18N
        jTable2.setRowHeight(30);
        jTable2.setRowMargin(10);
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(5);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(5);
        }

        RankingTitle.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        RankingTitle.setForeground(new java.awt.Color(255, 255, 255));
        RankingTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RankingTitle.setText("Ranking");

        PlayerButton.setBackground(new java.awt.Color(153, 153, 153));
        PlayerButton.setForeground(new java.awt.Color(0, 0, 0));
        PlayerButton.setText("Player");
        PlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayerButtonActionPerformed(evt);
            }
        });

        AdmButton.setBackground(new java.awt.Color(153, 153, 153));
        AdmButton.setForeground(new java.awt.Color(0, 0, 0));
        AdmButton.setText("Administrador");
        AdmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdmButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(400, 400, 400)
                        .addComponent(RankingTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(PlayerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(AdmButton)))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RankingTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(25, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(PlayerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(236, 236, 236))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AdmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(228, 228, 228))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void PlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayerButtonActionPerformed
        try {
            preencheListaPlayers();
            preencheTabela();
        } catch (camposInvalidosException e) {
            System.out.println("Erro ao preencher a lista de jogadores: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Erro ao carregar a lista de jogadores: " + e.getMessage());
        }
    }//GEN-LAST:event_PlayerButtonActionPerformed

    private void AdmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdmButtonActionPerformed
        try {
            preencheListaAdmin();
            preencheTabela();
        } catch (camposInvalidosException e) {
            System.out.println("Erro ao preencher a lista de administradores: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Erro ao carregar a lista de administradores: " + e.getMessage());
        }
    }//GEN-LAST:event_AdmButtonActionPerformed

    private void ordenaMMR() {
        Collections.sort(jogadores);
    }

    public void preencheListaPlayers() throws camposInvalidosException {
        jogadores.clear();
        String path = "";
        String os = System.getProperty("os.name").toLowerCase();
        if (os.contains("win")) {
            path = "src\\main\\resources\\userData\\userData.csv";
        } else if (os.contains("nix") || os.contains("nux") || os.contains("mac")) {
            path = "src/main/resources/userData/userData.csv";
        }

        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            String line = br.readLine();
            while (line != null) {
                String[] fields = line.split(",");
                if (fields.length >= 5) {
                    String name = fields[0];
                    String mmr = fields[4];
                    RankingEntry aux = new RankingEntry(name, mmr);
                    System.out.println(aux);
                    jogadores.add(aux);
                }
                line = br.readLine();
            }

        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Erro ao carregar o arquivo: " + e.getMessage());
        }
    }

    public void preencheListaAdmin() throws camposInvalidosException {
        jogadores.clear();
        String path = "";
        String os = System.getProperty("os.name").toLowerCase();
        if (os.contains("win")) {
            path = "src\\main\\resources\\userData\\AdminData.csv";
        } else if (os.contains("nix") || os.contains("nux") || os.contains("mac")) {
            path = "src/main/resources/userData/AdminData.csv";
        }

        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            String line = br.readLine();
            while (line != null) {
                String[] fields = line.split(",");
                if (fields.length >= 5) {
                    String name = fields[0];
                    String mmr = fields[4];
                    RankingEntry aux = new RankingEntry(name, mmr);
                    System.out.println(aux);
                    jogadores.add(aux);
                }
                line = br.readLine();
            }

        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Erro ao carregar o arquivo: " + e.getMessage());
        }
    }

    public void preencheTabela() {
        DefaultTableModel tabela = (DefaultTableModel) jTable2.getModel();
        ordenaMMR();
        for (RankingEntry aux : jogadores) {
            tabela.addRow(new Object[]{aux.getNome(), aux.getMmr()});
        }
        jTable2.setDefaultRenderer(Object.class, new CorPodio());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AdmButton;
    private javax.swing.JButton PlayerButton;
    private javax.swing.JLabel RankingTitle;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
