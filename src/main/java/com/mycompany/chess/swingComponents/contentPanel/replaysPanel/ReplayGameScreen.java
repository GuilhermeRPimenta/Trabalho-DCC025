/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.chess.swingComponents.contentPanel.replaysPanel;

/**
 *
 * @author guilh
 */
public class ReplayGameScreen extends javax.swing.JPanel {
    private int numberOfStates;
    private int stateIndex = 0;
    private ReplayBoard replayBoard;
    private ReplaysPanel replaysPanel;
    /**
     * Creates new form ReplayGameScreen
     */
    public ReplayGameScreen(Replay replay) {
        initComponents();
        numberOfStates = replay.getStatesList().size();
        replayBoard = new ReplayBoard(replay.getStatesList());
        add(replayBoard);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        prevStateButton = new javax.swing.JButton();
        nextStateButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        turnCount = new javax.swing.JLabel();

        setBackground(new java.awt.Color(51, 51, 51));
        setMinimumSize(new java.awt.Dimension(1009, 688));

        prevStateButton.setText("Voltar");
        prevStateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevStateButtonActionPerformed(evt);
            }
        });
        add(prevStateButton);

        nextStateButton.setText("Avan√ßar");
        nextStateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextStateButtonActionPerformed(evt);
            }
        });
        add(nextStateButton);

        exitButton.setText("Sair");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        add(exitButton);

        turnCount.setForeground(new java.awt.Color(255, 255, 255));
        turnCount.setText("Turno: 1");
        add(turnCount);
    }// </editor-fold>//GEN-END:initComponents

    private void nextStateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextStateButtonActionPerformed
        // TODO add your handling code here:
        if(stateIndex < numberOfStates -1){
            stateIndex++;
            replayBoard.updateBoard(stateIndex);
            turnCount.setText("Turno: " + String.valueOf(stateIndex + 1));
        }
    }//GEN-LAST:event_nextStateButtonActionPerformed

    private void prevStateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevStateButtonActionPerformed
        // TODO add your handling code here:
        if(stateIndex > 0){
            stateIndex--;
            replayBoard.updateBoard(stateIndex);
            turnCount.setText("Turno: " + String.valueOf(stateIndex + 1));
        }
    }//GEN-LAST:event_prevStateButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        replaysPanel.goToReplaysTable();
    }//GEN-LAST:event_exitButtonActionPerformed
    
    public void setReplaysPanel(ReplaysPanel replaysPanel){
        this.replaysPanel = replaysPanel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JButton nextStateButton;
    private javax.swing.JButton prevStateButton;
    private javax.swing.JLabel turnCount;
    // End of variables declaration//GEN-END:variables
}
